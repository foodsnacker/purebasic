; ###################; # ServQLite-pbi   #; # (c,p) 2009ff    #; ###################; #########################################################################################################; This code is licensed via a Creative Commons Licence:  http://creativecommons.org/licenses/by-nc-sa/3.0/; Means: you may alter the code, but have to give the changes back;        you may use this code as you like, but without commercial background; If you like to use this code commercially, please contact joerg.burbach@quadworks.de; #########################################################################################################; ToDo; - allow multiple connections; - correct Blob-Transfer; - correct fallback to internal SQLite-Routines available by PureBasic#TimeOut               = 2500 ; TimeOut für jede Anfrage ist 1000 msGlobal ServQL_BuffSize = 1000 ; BuffergrößeGlobal ServQL_Port     = 6832 ; Standard-PortGlobal ConnectionID    = 0    ; Connection-IDGlobal ServQL_Server$  = "127.0.0.1" ; ServQLite-Server-AdresseGlobal DatabaseString$ = ""   ; Puffer für eine AbfrageGlobal DatabaseInfo$   = ""   ; Puffer für Namen, Größe und Typ der TabelleGlobal Use_ServQLite   = 0    ; 1 = Server benutzenGlobal ServerQL_Ready     = 0  ; 0 = nur Lokal, 1 = Netzwerk nicht verfügbar, nur lokal, 2 = Netzwerk verfügbar, Server kann gesucht werdenGlobal ServerQL_LastError = 0 ; Letzter FehlerGlobal *ServerQL_BlobBuff     ; Puffer für den BlobGlobal ServerQL_BlobSize = 0  ; Größe des erhaltenen PuffersEnumeration #ServerQL_Lokal #ServerQL_Lokal_No_Network #ServerQL_NetworkEndEnumerationEnumeration #ServerQL_OK #ServerQL_DB_Created #ServerQL_DB_Exists #ServerQL_DB_Not_Found #ServerQL_DB_Opened #ServerQL_DB_Creation_Error #ServerQL_DB_Opened_Error #ServerQL_DB_Query_Success #ServerQL_DB_Query_Fault #ServerQL_Last_Row #ServerQL_First_Row #ServerQL_No_Network #ServerQL_Mem_Error #ServerQL_Port_ErrorEndEnumerationProcedure.s ServQL_WaitClientEvent(Connection, TimeOut = #TimeOut) Define *Buffer, TimeOutBeginn.l, Exit.l, CEvent.l, Temp$  *Buffer       = AllocateMemory(ServQL_BuffSize) TimeOutBeginn = 0 Exit          = 0 Repeat  TimeOutBeginn + 10  CEvent    = NetworkClientEvent(Connection)  If CEvent = #PB_NetworkEvent_Data   ReceiveNetworkData(Connection, *Buffer, ServQL_BuffSize)   Temp$ = PeekS(*Buffer)   Debug "server said: " + Temp$   Exit = 1  EndIf  If TimeOutBeginn >= TimeOut   Debug "TIMEOUT!"   Exit = 1  EndIf  Delay(10) Until Exit = 1 FreeMemory(*Buffer) ProcedureReturn Temp$EndProcedureProcedure.l ServQL_Connect_Server(IP$, Port) Define Antwort.l If Use_ServQLite = 1  Antwort = OpenNetworkConnection(IP$, Port)  If Antwort = 0    Use_ServQLite = 0    UseSQLiteDatabase()  EndIf  ProcedureReturn Antwort Else  ProcedureReturn 1 EndIfEndProcedureProcedure.s ServQL_DatabaseError(Connection) If Use_ServQLite = 1  SendNetworkString(Connection, "DatabaseError")  ProcedureReturn ServQL_WaitClientEvent(Connection) Else  ProcedureReturn DatabaseError() EndIfEndProcedureProcedure.l ServQL_OpenDatabase(Connection, Database$, User$, Password$, Make = 1) Define DBFile.l  If Use_ServQLite = 1  If Make = 1   SendNetworkString(Connection, "CreateDatabase" + "°" + Database$ + "°" + User$ + "°" + Password$)   ServQL_WaitClientEvent(Connection)   EndIf  SendNetworkString(Connection, "OpenDatabase" + "°" + Database$ + "°" + User$ + "°" + Password$)  ServQL_WaitClientEvent(Connection)  ProcedureReturn Connection EndIf If Make = 1  DBFile = ReadFile(#PB_Any,  Database$)  If DBFile <> 0   If IsFile(DBFile)    CloseFile(DBFile)   EndIf   ServerQL_LastError = #ServerQL_DB_Exists  Else   DBFile = CreateFile(#PB_Any,  Database$)   If IsFile(DBFile)    CloseFile(DBFile)   EndIf   If DBFile <> 0    ServerQL_LastError = #ServerQL_DB_Created   Else    ServerQL_LastError = #ServerQL_DB_Creation_Error   EndIf    EndIf  ProcedureReturn OpenDatabase(Connection, Database$, User$, Password$) EndIf EndProcedureProcedure.l ServQL_CloseDatabase(Connection) If Use_ServQLite = 1  SendNetworkString(Connection, "CloseDatabase")  ProcedureReturn Val(ServQL_WaitClientEvent(Connection)) Else  ProcedureReturn CloseDatabase(Connection) EndIf EndProcedureProcedure.l ServQL_DatabaseQuery(Connection, Request$) Define TemP$  If Use_ServQLite = 1  If FindString(UCase(Request$), "SELECT", 0) <> 0   DatabaseInfo$ = ""  EndIf  SendNetworkString(Connection, "DatabaseQuery" + "°" + Request$)  Temp$ = ServQL_WaitClientEvent(Connection)  If StringField(Temp$, 2, "°") <> "0";    Debug temp$   If FindString(Temp$, "Time-Out", 0)    ProcedureReturn -1   EndIf   DatabaseInfo$ = Temp$   ProcedureReturn 1  EndIf Else  ProcedureReturn DatabaseQuery(Connection, Request$) EndIfEndProcedureProcedure.s ServQL_DatabaseColumnName(Connection, Column) If Use_ServQLite = 1  ProcedureReturn StringField(DatabaseInfo$, 4 + Column * 3, "°") Else  ProcedureReturn DatabaseColumnName(Connection, Column) EndIfEndProcedureProcedure.l ServQL_DatabaseColumnSize(Connection, Column) If Use_ServQLite = 1  ProcedureReturn Val(StringField(DatabaseInfo$, 5 + Column * 3, "°")) Else  ProcedureReturn DatabaseColumnSize(Connection, Column) EndIfEndProcedureProcedure.l ServQL_DatabaseColumnType(Connection, Column) If Use_ServQLite = 1  ProcedureReturn Val(StringField(DatabaseInfo$, 6 + Column * 3, "°")) Else  ProcedureReturn DatabaseColumnType(Connection, Column) EndIfEndProcedureProcedure.l ServQL_DatabaseColums(Connection) If Use_ServQLite = 1  ProcedureReturn Val(StringField(DatabaseInfo$, 3, "°")) Else  ProcedureReturn DatabaseColumns(Connection) EndIfEndProcedureProcedure.l ServQL_NextDatabaseRow(Connection) Define Temp$  If Use_ServQLite = 1  DataBaseString$ = ""  SendNetworkString(Connection, "NextDatabaseRow")  Temp$ = ServQL_WaitClientEvent(Connection)  If StringField(Temp$, 2, "°") <> "0"   ProcedureReturn 1  EndIf Else  ProcedureReturn NextDatabaseRow(Connection) EndIfEndProcedureProcedure.l ServQL_PreviousDatabaseRow(Connection) If Use_ServQLite = 1  DataBaseString$ = ""  SendNetworkString(Connection, "PreviousDatabaseRow")  ServQL_WaitClientEvent(Connection)  Else  ProcedureReturn PreviousDatabaseRow(Connection) EndIfEndProcedureProcedure.l ServQL_DatabaseUpdate(Connection, Request$) If Use_ServQLite = 1  SendNetworkString(Connection, "DatabaseUpdate" + "°" + Request$)  ProcedureReturn Val(ServQL_WaitClientEvent(Connection)) Else  ProcedureReturn DatabaseUpdate(Connection, Request$) EndIfEndProcedureProcedure.l ServQL_CloseNetworkConnection(Connection) If Use_ServQLite = 1  CloseNetworkConnection(Connection) EndIfEndProcedureProcedure.s ServQL_RefreshDatabaseString(Connection) If DataBaseString$ = ""  SendNetworkString(Connection, "GetDatabaseString")  DataBaseString$ = ServQL_WaitClientEvent(Connection)  DataBaseString$ = Right(DataBaseString$, Len(DataBaseString$) - FindString(DataBaseString$, "°", 0)) EndIf ProcedureReturn DataBasestring$EndProcedureProcedure.s ServQL_GetDatabaseString(Connection, Column) If Use_ServQLite = 1  ProcedureReturn StringField(ServQL_RefreshDatabaseString(Connection), Column + 1, "°") Else  ProcedureReturn GetDatabaseString(Connection, Column) EndIfEndProcedureProcedure.l ServQL_GetDatabaseLong(Connection, Column) If Use_ServQLite = 1  ProcedureReturn Val(StringField(ServQL_RefreshDatabaseString(Connection), Column + 1, "°")) Else  ProcedureReturn GetDatabaseLong(Connection, Column) EndIfEndProcedureProcedure.q ServQL_GetDatabaseQuad(Connection, Column) If Use_ServQLite = 1  ProcedureReturn ValF(StringField(ServQL_RefreshDatabaseString(Connection), Column, "°")) Else  ProcedureReturn GetDatabaseQuad(Connection, Column) EndIfEndProcedureProcedure.f ServQL_GetDatabaseFloat(Connection, Column) If Use_ServQLite = 1  ProcedureReturn ValF(StringField(ServQL_RefreshDatabaseString(Connection), Column, "°")) Else  ProcedureReturn GetDatabaseFloat(Connection, Column) EndIfEndProcedureProcedure.d ServQL_GetDatabaseDouble(Connection, Column) If Use_ServQLite = 1  ProcedureReturn ValD(StringField(ServQL_RefreshDatabaseString(Connection), Column, "°")) Else  ProcedureReturn GetDatabaseDouble(Connection, Column) EndIfEndProcedureProcedure.l ServQL_SetDatabaseBlob(Connection, Statementindex, *Buffer, Bufferlength) If Use_ServQLite = 1  SendNetworkString(Connection, "SetDatabaseBlob°" + Str(Statementindex) + "°" + Str(Bufferlength))  ServQL_WaitClientEvent(Connection)    ; Abfrage, ob ich schicken kann  SendNetworkData(Connection, *Buffer, Bufferlength)  ServQL_WaitClientEvent(Connection)    ; Abfrage, ob alles in Ordnung Else  ProcedureReturn SetDatabaseBlob(Connection, Statementindex, *Buffer, Bufferlength) EndIfEndProcedureProcedure.l ServQL_GetDatabaseBlob(Connection, Column)Define Temp$ If Use_ServQLite = 1  SendNetworkString(Connection, "GetDatabaseBlob°" + Str(Column))  Temp$ = ServQL_WaitClientEvent(Connection)  ServerQL_BlobSize = Val(StringField(Temp$, 3, "°")) Else  ServerQL_BlobSize = DatabaseColumnSize(Connection, Column) EndIf If *ServerQL_BlobBuff <> 0  FreeMemory(*ServerQL_BlobBuff) EndIf *ServerQL_BlobBuff = AllocateMemory(ServerQL_BlobSize)  If Use_ServQLite = 1  SendNetworkString(Connection, "GetDatabaseBlobRec")   ReceiveNetworkData(Connection, *ServerQL_BlobBuff, ServerQL_BlobSize) Else   GetDatabaseBlob(Connection, Column, *ServerQL_BlobBuff, ServerQL_BlobSize)  ProcedureReturn 1 EndIfEndProcedure Procedure.l ServQL_FinishDatabaseQuery(Connection) If Use_ServQLite = 1  SendNetworkString(Connection, "FinishDatabaseQuery")  ProcedureReturn Val(ServQL_WaitClientEvent(Connection))  Else  ProcedureReturn FinishDatabaseQuery(Connection) EndIfEndProcedureProcedure.l ServQL_Quit_Server(Connection) If Use_ServQLite = 1  SendNetworkString(Connection, "Quit Server")  ServQL_WaitClientEvent(Connection) EndIfEndProcedure; IDE Options = PureBasic 6.00 LTS (MacOS X - x64); CursorPosition = 2; Folding = IAAA-; EnableXP; Executable = TestClient.app